def runtimeSuites = ['xtext', 'xtend'].collect{it + '-runtime-tests'}
def ideSuites = ['xtext', 'xtend'].collect{it + '-ide-tests'}
def java8Suites= ['xtend-runtime-tests-java8']
def intellijSuites = ['intellij-tests']
def onPushSuites = runtimeSuites + ideSuites + java8Suites + intellijSuites

def slowSuites = ['xtext', 'xtend'].collect{it + '-slow-tests'}
def smokeSuites = ['smoke-tests']
def generatorSuites = ['generator-tests']
def allSuites = onPushSuites + slowSuites + smokeSuites + generatorSuites

def testScripts = allSuites.collectEntries{suite -> [(suite): project.file("scripts/${suite}.txt").text]}

branches.each { branch ->
	def testJobs = [allSuites, ['oldest', 'latest']]
		.combinations{ suite, platformName -> 
			def platform = branch.platforms[platformName]
			new TestJob(branch: branch.name, suite: suite, platformName: platformName, target: platform.target, jdk: platform.jdk, buildSystem: 'buckminster')
		}
		.findAll {
			(!(smokeSuites + java8Suites).contains(it.suite) || it.platformName == 'latest') &&
			(!intellijSuites.contains(it.suite) || it.branch == 'master' && it.target == 'Latest')
		}
		.each {
			if(java8Suites.contains(it.suite)) {
				it.jdk = jdks['1.8']
			}
			if(intellijSuites.contains(it.suite)) {
				it.buildSystem = 'gradle'
			}
		}

	jenkins {
		
		jobs.create("xtext-${branch.name}").definition {
			xml templates.push.override { config -> 
				config.scm.branches.'hudson.plugins.git.BranchSpec'.name = branch.name
				config.description = "This job was generated"
				config.buildWrappers.'hudson.plugins.locksandlatches.LockWrapper'
					.locks.'hudson.plugins.locksandlatches.LockWrapper_-LockWaitConfig'
					.name = "target-platform-refresh-${branch.name}"
				config.builders.'hudson.plugins.copyartifact.CopyArtifact'[0]
					.project = "target-platforms-${branch.name}"
				config.publishers.'hudson.plugins.parameterizedtrigger.BuildTrigger'.configs
					.'hudson.plugins.parameterizedtrigger.BuildTriggerConfig'
					.projects	= testJobs.findAll{onPushSuites.contains(it.suite)}.collect{it.name}.join(',')
				}
		}
		
		jobs.create("target-platforms-${branch.name}").definition {
			xml templates.targetPlatforms.override { config -> 
				config.scm.branches.'hudson.plugins.git.BranchSpec'.name = branch.name
				config.description = "This job was generated"
				config.buildWrappers.'hudson.plugins.locksandlatches.LockWrapper'
					.locks.'hudson.plugins.locksandlatches.LockWrapper_-LockWaitConfig'
					.name = "target-platform-refresh-${branch.name}"
				config.publishers.'hudson.plugins.parameterizedtrigger.BuildTrigger'.configs
					.'hudson.plugins.parameterizedtrigger.BuildTriggerConfig'
					.projects	= testJobs.findAll{slowSuites.contains(it.suite) || generatorSuites.contains(it.suite)}.collect{it.name}.join(',')
				}
		}
		
		testJobs.each { job -> 
			jobs.create(job.name).definition {
				def template = templates["${job.buildSystem}StyleTest"]
				xml template.override { config -> 
					config.properties.'hudson.model.ParametersDefinitionProperty'
						.parameterDefinitions.'hudson.model.ChoiceParameterDefinition'
						.choices.a.string = job.target
					config.scm.branches.'hudson.plugins.git.BranchSpec'[1].name = job.branch
					config.description = "This job was generated"
					config.jdk = job.jdk
					
					def trigger = config.triggers.'org.jenkinsci.plugins.ghprb.GhprbTrigger'
					trigger.triggerPhrase = "Jenkins ${job.name}"
					trigger.commitStatusContext = "Jenkins/${job.name}"
					trigger.project = job.name
					if ((slowSuites + ideSuites + generatorSuites).contains(job.suite)
						|| job.suite == 'xtext-runtime-tests' // these currently contain ui tests
						) {
						config.buildWrappers.appendNode {
							'hudson.plugins.xvnc.Xvnc'() {
								takeScreenshot(false)
								useXauthority(true)
							}
						}
					}
					if (slowSuites.contains(job.suite)) {
						config.buildWrappers.'hudson.plugins.build__timeout.BuildTimeoutWrapper'
							.strategy.timeoutMinutes = 180
					}
					
					if (smokeSuites.contains(job.suite)) {
						config.triggers.appendNode {
							'hudson.triggers.TimerTrigger'() {
								spec("H 21 * * *")
							}
						}
						config.buildWrappers.'hudson.plugins.build__timeout.BuildTimeoutWrapper'
							.strategy.timeoutMinutes = 600
					}
					
					if (job.buildSystem == 'buckminster') {
						config.builders.'hudson.plugins.copyartifact.CopyArtifact'[0]
							.project = "xtext-${branch.name}"
						config.builders.'hudson.plugins.copyartifact.CopyArtifact'[1]
							.project = "target-platforms-${branch.name}"
						def builder = config.builders.'hudson.plugins.buckminster.EclipseBuckminsterBuilder'
						def params = '-Declipse.p2.mirrors=false\n-Dcheckout.location=${WORKSPACE}/org.eclipse.xtext.git/\n-Dxtext.checkout.location=${checkout.location}\n-Dxtext.p2.repository=${WORKSPACE}/repositories/xtext.p2.repository'
						if (job.jdk == jdks['1.8']) {
							params += '\n-DJAVA8=true'
							builder.installationName = 'buckminster-4.4'
						}
						if (generatorSuites.contains(job.suite)) {
							params += '\n-DECLIPSE.TARGET.ALIAS=${ECLIPSE_TARGET_ALIAS}\n-DWITH.MWE2=true\n-DEV.BUILD=false\n-Dforce.javadoc=false\n-Dantlr_gen.p2.repository=http://download.itemis.de/updates/nightly\n-Demf.target.platform=http://download.eclipse.org/modeling/emf/emf/updates/nightly/'
							builder.installationName = 'buckminster-mwe2-headless'
						}
						builder.commands = testScripts[job.suite]
						builder.params = params
					}
					
					if (job.buildSystem == 'gradle') {
						config.builders.'hudson.plugins.gradle.Gradle'.tasks = testScripts[job.suite]
					}
				}
			}
		}
	}
}

@groovy.transform.Canonical
class TestJob {
	String suite
	String platformName
	String target
	String jdk
	String branch
	String buildSystem
	
	def getName() {
		suite + "-" + branch + "-" + platformName
	}
}
